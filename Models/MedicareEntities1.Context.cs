//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Clinic_Automation.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MedicareEntities1 : DbContext
    {
        public MedicareEntities1()
            : base("name=MedicareEntities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Medicine> Medicines { get; set; }
        public virtual DbSet<OrderList> OrderLists { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
    
        public virtual ObjectResult<Get_Account_Type_Result> Get_Account_Type()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Account_Type_Result>("Get_Account_Type");
        }
    
        public virtual ObjectResult<Login_Check_Result> Login_Check(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Login_Check_Result>("Login_Check", usernameParameter, passwordParameter);
        }
    
        public virtual int SupplyMedicine(Nullable<int> medicineID, Nullable<int> quantity, Nullable<int> orderId)
        {
            var medicineIDParameter = medicineID.HasValue ?
                new ObjectParameter("medicineID", medicineID) :
                new ObjectParameter("medicineID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("orderId", orderId) :
                new ObjectParameter("orderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SupplyMedicine", medicineIDParameter, quantityParameter, orderIdParameter);
        }
    
        public virtual ObjectResult<Get_Conversation_Result> Get_Conversation(Nullable<int> senderId, Nullable<int> receiverId)
        {
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("senderId", senderId) :
                new ObjectParameter("senderId", typeof(int));
    
            var receiverIdParameter = receiverId.HasValue ?
                new ObjectParameter("receiverId", receiverId) :
                new ObjectParameter("receiverId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Conversation_Result>("Get_Conversation", senderIdParameter, receiverIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Get_LoginID_from_username(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Get_LoginID_from_username", usernameParameter);
        }
    
        public virtual int SendMessage(Nullable<int> senderId, Nullable<int> receiverId, Nullable<System.DateTime> timestamp, string content)
        {
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("senderId", senderId) :
                new ObjectParameter("senderId", typeof(int));
    
            var receiverIdParameter = receiverId.HasValue ?
                new ObjectParameter("receiverId", receiverId) :
                new ObjectParameter("receiverId", typeof(int));
    
            var timestampParameter = timestamp.HasValue ?
                new ObjectParameter("timestamp", timestamp) :
                new ObjectParameter("timestamp", typeof(System.DateTime));
    
            var contentParameter = content != null ?
                new ObjectParameter("content", content) :
                new ObjectParameter("content", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SendMessage", senderIdParameter, receiverIdParameter, timestampParameter, contentParameter);
        }
    
        public virtual int SetSeenStatus(Nullable<int> senderId, Nullable<int> receiverId)
        {
            var senderIdParameter = senderId.HasValue ?
                new ObjectParameter("senderId", senderId) :
                new ObjectParameter("senderId", typeof(int));
    
            var receiverIdParameter = receiverId.HasValue ?
                new ObjectParameter("receiverId", receiverId) :
                new ObjectParameter("receiverId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetSeenStatus", senderIdParameter, receiverIdParameter);
        }
    
        public virtual ObjectResult<ListOfSenders_Result2> ListOfSenders(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListOfSenders_Result2>("ListOfSenders", usernameParameter);
        }
    }
}
